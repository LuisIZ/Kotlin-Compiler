# Kotlin Grammar

```ebnf
Program ::= VarDecList FunDecList
```

```ebnf
VarDecList ::= (VarDec_1)*

FunDecList ::= (FunDec)+
```

```ebnf
FunDecl ::= fun id ([ParamDecList]) [: Type] {Body}

Body ::= VarDecList StmList
```

```ebnf
ParamDecList ::= id: Type (, id: Type)*

VarDec_1 ::= var id: Type [(; VarDec_2)*]
           | val id: Type [(; VarDec_2)*]

Type ::= id

VarDec_2 ::= var id: Type
           | val id: Type
```

```ebnf
StmList ::= Stm [(; Stm)*]

Stm ::= id = CExp
      | println(CExp)
      | print(CExp)
      | if (CExp) {Body} [else {Body}]
      | for (id in ForRangeExp) {Body}
      | while (CExp) {Body}
      | return CExp
```

```ebnf
ForRangeExp ::= Num..Num
 
CExp ::= Exp([ < | <= | == ] Exp)

Exp ::= Term (( + | - ) Term)*

Term ::= Factor (( * | / ) Factor)*

Factor ::= id
         | Num
         | Bool
         | (Exp)         
```

```ebnf
Bool ::= true
       | false

Num ::= 0
      | 1
      | 2
      | 3
      | 4
      | 5
      | 6
      | 7
      | 8
      | 9  
```
